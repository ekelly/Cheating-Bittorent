Cheating-Bittorent ==================

Our high level approach was implement propshare and focus on potential nasty
messages.  We saw that clients in the Shark Tank were getting killed quite
often, and we considered our first priority to be staying alive.  On the flip
side, by hardening our client, we also came up with several ways to slow
everybody else down, which we implemented.

To implement propshare, we first had to make a few modifications to the
PeerCheckerTask, which periodically checks on the status of all clients and
decides which clients to upload to (based on their performance in the past 20
seconds).  Now the PeerCheckerTask notices how much each client uploads, and
then throttles each client to their share of our upload bandwidth.  The
throttling is done by setting a rate on the output stream itself.  When the
stream has sent the maximum number of bytes that the rate will allow, it sleeps
for 1 second.

To harden our client, we first looked for vulnerabilities.  By far, the most
vulnerable place is in PeerConnectionIn, which is where messages from other
peers are processed.  There are some gaping vulnerabilities in here, such as
automatically allocating however much space is specified that the message
contains, even if the message is empty.  There are also possibilities to exploit
while loops.  We patched these holes and turned them into our own attacks
against other peers. To exploit these vulnerabilities, we first make connections
to as many peers as the test allows file handles (10), and then send attack
messages to the remaining peers. As every round ends, we send attacks to those
peers which did not upload data to us, drop those connections, and find new
peers to replace them with.

Additionally, we implemented some of the changes proposed by the authors of
BitThief, but due to the constraints of the project (our client will be tested
against others to see which can download the most data the fastest), they were
removed. It was illogical to optimize for another goal (minimizing upload).
Perhaps with different testing constraints, minimizing upload would make us
faster than others, but because there are so many other peers, the amount we
upload is largely irrelevant.

By far the hardest parts were understanding the bittorrent protocol, and
understanding the Snark code.  For instance, trying to figure out whether
choking a peer and throttling at the same time wouldnâ€™t cause trouble later on
was challenging.  However, identifying possible attack vectors was fairly easy,
as there are some gaping security holes in Snark. :-)
